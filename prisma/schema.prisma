generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  binaryTargets   = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], type: Hash)
}

model User {
  id                              String              @id @default(cuid())
  name                            String?
  nickname                        String              @unique
  socialNetworks                  UserSocialNetwork[]
  email                           String?             @unique
  emailVerified                   DateTime?
  userInfo                        String?             @db.VarChar(280)
  role                            Role                @default(USER)
  image                           String?
  isBlocked                       Boolean             @default(false)
  blockReason                     String?
  accounts                        Account[]
  sessions                        Session[]
  lostAndFoundItems               LostAndFoundItem[]
  secretSocialNetworksAuthPayload String              @unique @default(cuid())

  @@index([id], type: Hash)
  @@index([nickname], type: Hash)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserSocialNetwork {
  id                             String                           @id @default(cuid())
  socialNetwork                  SocialNetwork
  externalId                     String // If social network has integer id, then it will be converted to string
  username                       String
  userId                         String
  user                           User                             @relation(fields: [userId], references: [id], onDelete: Cascade)
  lostAndFoundItemSocialNetworks LostAndFoundItemSocialNetworks[]

  @@unique([userId, socialNetwork])
  @@index([socialNetwork, userId])
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

model LostAndFoundItem {
  id               Int                              @id @default(autoincrement())
  name             String                           @db.VarChar(100)
  description      String                           @default("") @db.VarChar(512)
  campus           Campus
  reason           PostItemReason
  status           LostAndFoundItemStatus           @default(ACTIVE)
  images           String[]
  userId           String
  user             User                             @relation(fields: [userId], references: [id], onDelete: Cascade)
  socialNetworks   LostAndFoundItemSocialNetworks[]
  created          DateTime                         @default(now())
  expires          DateTime                         @default(dbgenerated("NOW() + interval '2 week'"))
  slug             String                           @unique @default(cuid())
  isInStoragePlace Boolean?                         @default(false)

  @@index([name], type: Hash)
}

enum LostAndFoundItemStatus {
  ACTIVE
  EXPIRED
  BLOCKED // if moderator delete item
}

model LostAndFoundItemSocialNetworks {
  id                  String            @id @default(cuid())
  lostAndFoundItemId  Int
  lostAndFoundItem    LostAndFoundItem  @relation(fields: [lostAndFoundItemId], references: [id], onDelete: Cascade)
  userSocialNetworkId String
  userSocialNetwork   UserSocialNetwork @relation(fields: [userSocialNetworkId], references: [id], onDelete: Cascade)

  @@unique([lostAndFoundItemId, userSocialNetworkId])
}

enum PostItemReason {
  LOST
  FOUND
  ANY
}

enum Campus {
  V78
  S20
  V86
  MP1
  SG22
  SHP23
  U7
}

enum SocialNetwork {
  TELEGRAM
  VK
}
